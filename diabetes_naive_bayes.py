# -*- coding: utf-8 -*-
"""diabetes_naive_bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nGn4jKw2xJdwwv6uHAY3kZbRVniquVZf

Importing Libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

"""Loading Dataset"""

#Loading the Dataset
diabetes_dataset=pd.read_csv('/content/diabetes1.csv')

diabetes_dataset.shape

#Statistical Data
diabetes_dataset.describe()

diabetes_dataset.count()

diabetes_dataset['Outcome'].value_counts()

#separating the data and labels
x = diabetes_dataset.drop(columns= 'Outcome',axis=1)
y = diabetes_dataset['Outcome']

"""Data Standardization"""

scaler= StandardScaler()

standardized_data=scaler.fit_transform(x)

x=standardized_data

"""Train Test Split"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Loading & Training the Model"""

naive_bayes_model=GaussianNB()

naive_bayes_model.fit(x_train,y_train)

"""Naive Bayes Model Evaluation"""

#Naive Bayes accuracy on Training data
x_train_prediction_naive_bayes=naive_bayes_model.predict(x_train)
training_data_accuracy_naive_bayes=accuracy_score(x_train_prediction_naive_bayes,y_train)

print("Traning Accuracy Naive Bayes: ",training_data_accuracy_naive_bayes)

#Naive Bayes accuracy on test data
x_test_prediction_naive_bayes=naive_bayes_model.predict(x_test)
test_data_accuracy_naive_bayes=accuracy_score(x_test_prediction_naive_bayes,y_test)

print("test Accuracy Naive Bayes: ",test_data_accuracy_naive_bayes)

"""Predictive System"""

input=(3,180,64,25,70,34,0.271,26)

#changing a input data into NUMPY array

input_data_as_numpy= np.asarray(input)

#reshaping data

input_data_reshaped=input_data_as_numpy.reshape(1,-1)

#standardizing reshaped data

std_data=scaler.transform(input_data_reshaped)

print(std_data)

#prediction


prediction_4=naive_bayes_model.predict(std_data)
print("naive Bayes: ",prediction_4)

"""Saving The Model"""

import pickle

filename="naive_bayes_model.sav"
pickle.dump(naive_bayes_model, open(filename, 'wb'))

#Loading th Model
naive_bayes_model= pickle.load(open("naive_bayes_model.sav", 'rb'))

input=(3,95.66526971191519,54.15709964501368,23.92764755955627,130.98985852364132,29.23583978814549,0.4617857374141494,18.66908575647887)

#changing a input data into NUMPY array

input_data_as_numpy= np.asarray(input)

#reshaping data

input_data_reshaped=input_data_as_numpy.reshape(1,-1)

#standardizing reshaped data

std_data=scaler.transform(input_data_reshaped)

#prediction
prediction_n=naive_bayes_model.predict(input_data_reshaped)

print("naive Bayes: ",prediction_n)
if(prediction_n[0]==0):
    print("Person is not Diabetic")
else:
    print("Person is Diabetic")

